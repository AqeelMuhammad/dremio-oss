#
# Copyright (C) 2017-2019 Dremio Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
 -
  description: "ANY_VALUE AGGREGATE PARTIAL NAME"
  input: "SELECT ANY_VALU^"
  output:
    completions: []
    functionContext: null
    hasMoreResults: false
 -
  description: "ANY_VALUE AGGREGATE ONLY NAME"
  input: "SELECT ANY_VALUE( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext: null
    hasMoreResults: true
 -
  description: "ANY_VALUE AGGREGATE WITH ALL"
  input: "SELECT ANY_VALUE( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext: null
    hasMoreResults: true
 -
  description: "ANY_VALUE AGGREGATE WITH DISTINCT"
  input: "SELECT ANY_VALUE( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext: null
    hasMoreResults: true
 -
  description: "ANY_VALUE AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT ANY_VALUE( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "AVG AGGREGATE PARTIAL NAME"
  input: "SELECT AV^"
  output:
    completions:
     -
      detail: "Computes the average of a set of values.\n"
      insertText: "AVG(${1|ALL,DISTINCT|} ${2:value})"
      kind: "Function"
      label: "AVG({ALL,DISTINCT} ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "AVG AGGREGATE ONLY NAME"
  input: "SELECT AVG( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Computes the average of a set of values.\n"
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
        name: "AVG"
        signatures:
         -
          description: "Returns the average of all the values."
          parameters:
           -
            description: "DOUBLE, NUMERIC, INTEGER, INTERVAL_DATE, INTERVAL_YEAR"
            kind: "REGULAR"
            name: "numeric_expression"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT AVG(3)"
            result: "3.0"
           -
            call: "SELECT AVG(\"val\")"
            result: "-0.333333"
          snippetOverride: "AVG(${1|ALL,DISTINCT|} ${2:value})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the average of all the values."
        parameters:
         -
          description: "DOUBLE, NUMERIC, INTEGER, INTERVAL_DATE, INTERVAL_YEAR"
          kind: "REGULAR"
          name: "numeric_expression"
          type: "NUMERIC"
        returnType: "DOUBLE"
        sampleCodes:
         -
          call: "SELECT AVG(3)"
          result: "3.0"
         -
          call: "SELECT AVG(\"val\")"
          result: "-0.333333"
        snippetOverride: "AVG(${1|ALL,DISTINCT|} ${2:value})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "AVG AGGREGATE WITH ALL"
  input: "SELECT AVG( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Computes the average of a set of values.\n"
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
        name: "AVG"
        signatures:
         -
          description: "Returns the average of all the values."
          parameters:
           -
            description: "DOUBLE, NUMERIC, INTEGER, INTERVAL_DATE, INTERVAL_YEAR"
            kind: "REGULAR"
            name: "numeric_expression"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT AVG(3)"
            result: "3.0"
           -
            call: "SELECT AVG(\"val\")"
            result: "-0.333333"
          snippetOverride: "AVG(${1|ALL,DISTINCT|} ${2:value})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the average of all the values."
        parameters:
         -
          description: "DOUBLE, NUMERIC, INTEGER, INTERVAL_DATE, INTERVAL_YEAR"
          kind: "REGULAR"
          name: "numeric_expression"
          type: "NUMERIC"
        returnType: "DOUBLE"
        sampleCodes:
         -
          call: "SELECT AVG(3)"
          result: "3.0"
         -
          call: "SELECT AVG(\"val\")"
          result: "-0.333333"
        snippetOverride: "AVG(${1|ALL,DISTINCT|} ${2:value})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "AVG AGGREGATE WITH DISTINCT"
  input: "SELECT AVG( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Computes the average of a set of values.\n"
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
        name: "AVG"
        signatures:
         -
          description: "Returns the average of all the values."
          parameters:
           -
            description: "DOUBLE, NUMERIC, INTEGER, INTERVAL_DATE, INTERVAL_YEAR"
            kind: "REGULAR"
            name: "numeric_expression"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT AVG(3)"
            result: "3.0"
           -
            call: "SELECT AVG(\"val\")"
            result: "-0.333333"
          snippetOverride: "AVG(${1|ALL,DISTINCT|} ${2:value})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the average of all the values."
        parameters:
         -
          description: "DOUBLE, NUMERIC, INTEGER, INTERVAL_DATE, INTERVAL_YEAR"
          kind: "REGULAR"
          name: "numeric_expression"
          type: "NUMERIC"
        returnType: "DOUBLE"
        sampleCodes:
         -
          call: "SELECT AVG(3)"
          result: "3.0"
         -
          call: "SELECT AVG(\"val\")"
          result: "-0.333333"
        snippetOverride: "AVG(${1|ALL,DISTINCT|} ${2:value})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "AVG AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT AVG( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "BIT_AND AGGREGATE PARTIAL NAME"
  input: "SELECT BIT_AN^"
  output:
    completions:
     -
      detail: "Returns the bitwise AND of all non-null input values, or null if none; integer and binary types are supported."
      insertText: "BIT_AND(${1|ALL,DISTINCT|} ${2:numericExpression})"
      kind: "Function"
      label: "BIT_AND({ALL,DISTINCT} ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "BIT_AND AGGREGATE ONLY NAME"
  input: "SELECT BIT_AND( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the bitwise AND of all non-null input values, or null if none; integer and binary types are supported."
        dremioVersion: "<DREMIO VERSION GOES HERE>"
        functionCategories:
         - "AGGREGATE"
         - "MATH"
        name: "BIT_AND"
        signatures:
         -
          description: "Takes the bitwise and of a numeric expression."
          parameters:
           -
            description: "The expression to bitwise and."
            kind: "REGULAR"
            name: "numericExpression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT BIT_AND(ALL NUMERIC_COLUMN)"
            result: "42"
          snippetOverride: "BIT_AND(${1|ALL,DISTINCT|} ${2:numericExpression})"
         -
          description: "Takes the bitwise and of a binary expression."
          parameters:
           -
            description: "The binary expression to take the bitwise and of."
            kind: "REGULAR"
            name: "binaryExpression"
            type: "BYTES"
          returnType: "BYTES"
          sampleCodes:
           -
            call: "SELECT BIT_AND(ALL BINARY_COLUMN)"
            result: "42"
          snippetOverride: "BIT_AND(${1|ALL,DISTINCT|} ${2:binaryExpression})"
      missingTypes:
       - "NUMERIC"
       - "BYTES"
      signaturesMatched:
       -
        description: "Takes the bitwise and of a numeric expression."
        parameters:
         -
          description: "The expression to bitwise and."
          kind: "REGULAR"
          name: "numericExpression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT BIT_AND(ALL NUMERIC_COLUMN)"
          result: "42"
        snippetOverride: "BIT_AND(${1|ALL,DISTINCT|} ${2:numericExpression})"
       -
        description: "Takes the bitwise and of a binary expression."
        parameters:
         -
          description: "The binary expression to take the bitwise and of."
          kind: "REGULAR"
          name: "binaryExpression"
          type: "BYTES"
        returnType: "BYTES"
        sampleCodes:
         -
          call: "SELECT BIT_AND(ALL BINARY_COLUMN)"
          result: "42"
        snippetOverride: "BIT_AND(${1|ALL,DISTINCT|} ${2:binaryExpression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "BIT_AND AGGREGATE WITH ALL"
  input: "SELECT BIT_AND( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the bitwise AND of all non-null input values, or null if none; integer and binary types are supported."
        dremioVersion: "<DREMIO VERSION GOES HERE>"
        functionCategories:
         - "AGGREGATE"
         - "MATH"
        name: "BIT_AND"
        signatures:
         -
          description: "Takes the bitwise and of a numeric expression."
          parameters:
           -
            description: "The expression to bitwise and."
            kind: "REGULAR"
            name: "numericExpression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT BIT_AND(ALL NUMERIC_COLUMN)"
            result: "42"
          snippetOverride: "BIT_AND(${1|ALL,DISTINCT|} ${2:numericExpression})"
         -
          description: "Takes the bitwise and of a binary expression."
          parameters:
           -
            description: "The binary expression to take the bitwise and of."
            kind: "REGULAR"
            name: "binaryExpression"
            type: "BYTES"
          returnType: "BYTES"
          sampleCodes:
           -
            call: "SELECT BIT_AND(ALL BINARY_COLUMN)"
            result: "42"
          snippetOverride: "BIT_AND(${1|ALL,DISTINCT|} ${2:binaryExpression})"
      missingTypes:
       - "NUMERIC"
       - "BYTES"
      signaturesMatched:
       -
        description: "Takes the bitwise and of a numeric expression."
        parameters:
         -
          description: "The expression to bitwise and."
          kind: "REGULAR"
          name: "numericExpression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT BIT_AND(ALL NUMERIC_COLUMN)"
          result: "42"
        snippetOverride: "BIT_AND(${1|ALL,DISTINCT|} ${2:numericExpression})"
       -
        description: "Takes the bitwise and of a binary expression."
        parameters:
         -
          description: "The binary expression to take the bitwise and of."
          kind: "REGULAR"
          name: "binaryExpression"
          type: "BYTES"
        returnType: "BYTES"
        sampleCodes:
         -
          call: "SELECT BIT_AND(ALL BINARY_COLUMN)"
          result: "42"
        snippetOverride: "BIT_AND(${1|ALL,DISTINCT|} ${2:binaryExpression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "BIT_AND AGGREGATE WITH DISTINCT"
  input: "SELECT BIT_AND( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the bitwise AND of all non-null input values, or null if none; integer and binary types are supported."
        dremioVersion: "<DREMIO VERSION GOES HERE>"
        functionCategories:
         - "AGGREGATE"
         - "MATH"
        name: "BIT_AND"
        signatures:
         -
          description: "Takes the bitwise and of a numeric expression."
          parameters:
           -
            description: "The expression to bitwise and."
            kind: "REGULAR"
            name: "numericExpression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT BIT_AND(ALL NUMERIC_COLUMN)"
            result: "42"
          snippetOverride: "BIT_AND(${1|ALL,DISTINCT|} ${2:numericExpression})"
         -
          description: "Takes the bitwise and of a binary expression."
          parameters:
           -
            description: "The binary expression to take the bitwise and of."
            kind: "REGULAR"
            name: "binaryExpression"
            type: "BYTES"
          returnType: "BYTES"
          sampleCodes:
           -
            call: "SELECT BIT_AND(ALL BINARY_COLUMN)"
            result: "42"
          snippetOverride: "BIT_AND(${1|ALL,DISTINCT|} ${2:binaryExpression})"
      missingTypes:
       - "NUMERIC"
       - "BYTES"
      signaturesMatched:
       -
        description: "Takes the bitwise and of a numeric expression."
        parameters:
         -
          description: "The expression to bitwise and."
          kind: "REGULAR"
          name: "numericExpression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT BIT_AND(ALL NUMERIC_COLUMN)"
          result: "42"
        snippetOverride: "BIT_AND(${1|ALL,DISTINCT|} ${2:numericExpression})"
       -
        description: "Takes the bitwise and of a binary expression."
        parameters:
         -
          description: "The binary expression to take the bitwise and of."
          kind: "REGULAR"
          name: "binaryExpression"
          type: "BYTES"
        returnType: "BYTES"
        sampleCodes:
         -
          call: "SELECT BIT_AND(ALL BINARY_COLUMN)"
          result: "42"
        snippetOverride: "BIT_AND(${1|ALL,DISTINCT|} ${2:binaryExpression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "BIT_AND AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT BIT_AND( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "BIT_OR AGGREGATE PARTIAL NAME"
  input: "SELECT BIT_O^"
  output:
    completions:
     -
      detail: "Returns the bitwise OR of all non-null input values, or null if none; integer and binary types are supported."
      insertText: "BIT_OR(${1|ALL,DISTINCT|} ${2:numericExpression})"
      kind: "Function"
      label: "BIT_OR({ALL,DISTINCT} ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "BIT_OR AGGREGATE ONLY NAME"
  input: "SELECT BIT_OR( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the bitwise OR of all non-null input values, or null if none; integer and binary types are supported."
        dremioVersion: "<DREMIO VERSION GOES HERE>"
        functionCategories:
         - "AGGREGATE"
         - "MATH"
        name: "BIT_OR"
        signatures:
         -
          description: "Takes the bitwise and of a numeric expression."
          parameters:
           -
            description: "The expression to bitwise and."
            kind: "REGULAR"
            name: "numericExpression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT BIT_OR(ALL NUMERIC_COLUMN)"
            result: "42"
          snippetOverride: "BIT_OR(${1|ALL,DISTINCT|} ${2:numericExpression})"
         -
          description: "Takes the bitwise and of a binary expression."
          parameters:
           -
            description: "The binary expression to take the bitwise and of."
            kind: "REGULAR"
            name: "binaryExpression"
            type: "BYTES"
          returnType: "BYTES"
          sampleCodes:
           -
            call: "SELECT BIT_OR(ALL BINARY_COLUMN)"
            result: "42"
          snippetOverride: "BIT_OR(${1|ALL,DISTINCT|} ${2:binaryExpression})"
      missingTypes:
       - "NUMERIC"
       - "BYTES"
      signaturesMatched:
       -
        description: "Takes the bitwise and of a numeric expression."
        parameters:
         -
          description: "The expression to bitwise and."
          kind: "REGULAR"
          name: "numericExpression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT BIT_OR(ALL NUMERIC_COLUMN)"
          result: "42"
        snippetOverride: "BIT_OR(${1|ALL,DISTINCT|} ${2:numericExpression})"
       -
        description: "Takes the bitwise and of a binary expression."
        parameters:
         -
          description: "The binary expression to take the bitwise and of."
          kind: "REGULAR"
          name: "binaryExpression"
          type: "BYTES"
        returnType: "BYTES"
        sampleCodes:
         -
          call: "SELECT BIT_OR(ALL BINARY_COLUMN)"
          result: "42"
        snippetOverride: "BIT_OR(${1|ALL,DISTINCT|} ${2:binaryExpression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "BIT_OR AGGREGATE WITH ALL"
  input: "SELECT BIT_OR( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the bitwise OR of all non-null input values, or null if none; integer and binary types are supported."
        dremioVersion: "<DREMIO VERSION GOES HERE>"
        functionCategories:
         - "AGGREGATE"
         - "MATH"
        name: "BIT_OR"
        signatures:
         -
          description: "Takes the bitwise and of a numeric expression."
          parameters:
           -
            description: "The expression to bitwise and."
            kind: "REGULAR"
            name: "numericExpression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT BIT_OR(ALL NUMERIC_COLUMN)"
            result: "42"
          snippetOverride: "BIT_OR(${1|ALL,DISTINCT|} ${2:numericExpression})"
         -
          description: "Takes the bitwise and of a binary expression."
          parameters:
           -
            description: "The binary expression to take the bitwise and of."
            kind: "REGULAR"
            name: "binaryExpression"
            type: "BYTES"
          returnType: "BYTES"
          sampleCodes:
           -
            call: "SELECT BIT_OR(ALL BINARY_COLUMN)"
            result: "42"
          snippetOverride: "BIT_OR(${1|ALL,DISTINCT|} ${2:binaryExpression})"
      missingTypes:
       - "NUMERIC"
       - "BYTES"
      signaturesMatched:
       -
        description: "Takes the bitwise and of a numeric expression."
        parameters:
         -
          description: "The expression to bitwise and."
          kind: "REGULAR"
          name: "numericExpression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT BIT_OR(ALL NUMERIC_COLUMN)"
          result: "42"
        snippetOverride: "BIT_OR(${1|ALL,DISTINCT|} ${2:numericExpression})"
       -
        description: "Takes the bitwise and of a binary expression."
        parameters:
         -
          description: "The binary expression to take the bitwise and of."
          kind: "REGULAR"
          name: "binaryExpression"
          type: "BYTES"
        returnType: "BYTES"
        sampleCodes:
         -
          call: "SELECT BIT_OR(ALL BINARY_COLUMN)"
          result: "42"
        snippetOverride: "BIT_OR(${1|ALL,DISTINCT|} ${2:binaryExpression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "BIT_OR AGGREGATE WITH DISTINCT"
  input: "SELECT BIT_OR( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the bitwise OR of all non-null input values, or null if none; integer and binary types are supported."
        dremioVersion: "<DREMIO VERSION GOES HERE>"
        functionCategories:
         - "AGGREGATE"
         - "MATH"
        name: "BIT_OR"
        signatures:
         -
          description: "Takes the bitwise and of a numeric expression."
          parameters:
           -
            description: "The expression to bitwise and."
            kind: "REGULAR"
            name: "numericExpression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT BIT_OR(ALL NUMERIC_COLUMN)"
            result: "42"
          snippetOverride: "BIT_OR(${1|ALL,DISTINCT|} ${2:numericExpression})"
         -
          description: "Takes the bitwise and of a binary expression."
          parameters:
           -
            description: "The binary expression to take the bitwise and of."
            kind: "REGULAR"
            name: "binaryExpression"
            type: "BYTES"
          returnType: "BYTES"
          sampleCodes:
           -
            call: "SELECT BIT_OR(ALL BINARY_COLUMN)"
            result: "42"
          snippetOverride: "BIT_OR(${1|ALL,DISTINCT|} ${2:binaryExpression})"
      missingTypes:
       - "NUMERIC"
       - "BYTES"
      signaturesMatched:
       -
        description: "Takes the bitwise and of a numeric expression."
        parameters:
         -
          description: "The expression to bitwise and."
          kind: "REGULAR"
          name: "numericExpression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT BIT_OR(ALL NUMERIC_COLUMN)"
          result: "42"
        snippetOverride: "BIT_OR(${1|ALL,DISTINCT|} ${2:numericExpression})"
       -
        description: "Takes the bitwise and of a binary expression."
        parameters:
         -
          description: "The binary expression to take the bitwise and of."
          kind: "REGULAR"
          name: "binaryExpression"
          type: "BYTES"
        returnType: "BYTES"
        sampleCodes:
         -
          call: "SELECT BIT_OR(ALL BINARY_COLUMN)"
          result: "42"
        snippetOverride: "BIT_OR(${1|ALL,DISTINCT|} ${2:binaryExpression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "BIT_OR AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT BIT_OR( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "BIT_XOR AGGREGATE PARTIAL NAME"
  input: "SELECT BIT_XO^"
  output:
    completions: []
    functionContext: null
    hasMoreResults: false
 -
  description: "BIT_XOR AGGREGATE ONLY NAME"
  input: "SELECT BIT_XOR( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext: null
    hasMoreResults: true
 -
  description: "BIT_XOR AGGREGATE WITH ALL"
  input: "SELECT BIT_XOR( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext: null
    hasMoreResults: true
 -
  description: "BIT_XOR AGGREGATE WITH DISTINCT"
  input: "SELECT BIT_XOR( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext: null
    hasMoreResults: true
 -
  description: "BIT_XOR AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT BIT_XOR( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "COUNT AGGREGATE PARTIAL NAME"
  input: "SELECT COUN^"
  output:
    completions:
     -
      detail: "Returns the total number of records for the specified expression."
      insertText: "COUNT(*)"
      kind: "Function"
      label: "COUNT(*)"
     -
      detail: "Returns the total number of records for the specified expression."
      insertText: "COUNT(${1|ALL,DISTINCT|} ${2:value})"
      kind: "Function"
      label: "COUNT({ALL,DISTINCT} ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "COUNT AGGREGATE ONLY NAME"
  input: "SELECT COUNT( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext:
      function:
        description: "Returns the total number of records for the specified expression."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "COUNT"
        signatures:
         -
          description: "Returns the total number of records in the dataset."
          parameters: []
          returnType: "BIGINT"
          sampleCodes:
           -
            call: "SELECT COUNT(*) FROM EMP"
            result: "93456745"
          snippetOverride: "COUNT(*)"
         -
          description: "Returns the total number of records for the specified expression."
          parameters:
           -
            description: "Expression to evaluate number of records for."
            kind: "REGULAR"
            name: "expression"
            type: "ANY"
          returnType: "BIGINT"
          sampleCodes:
           -
            call: "SELECT COUNT(column_name) FROM my_table"
            result: "89"
          snippetOverride: "COUNT(${1|ALL,DISTINCT|} ${2:value})"
      missingTypes:
       - "ANY"
      signaturesMatched:
       -
        description: "Returns the total number of records for the specified expression."
        parameters:
         -
          description: "Expression to evaluate number of records for."
          kind: "REGULAR"
          name: "expression"
          type: "ANY"
        returnType: "BIGINT"
        sampleCodes:
         -
          call: "SELECT COUNT(column_name) FROM my_table"
          result: "89"
        snippetOverride: "COUNT(${1|ALL,DISTINCT|} ${2:value})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "COUNT AGGREGATE WITH ALL"
  input: "SELECT COUNT( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext:
      function:
        description: "Returns the total number of records for the specified expression."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "COUNT"
        signatures:
         -
          description: "Returns the total number of records in the dataset."
          parameters: []
          returnType: "BIGINT"
          sampleCodes:
           -
            call: "SELECT COUNT(*) FROM EMP"
            result: "93456745"
          snippetOverride: "COUNT(*)"
         -
          description: "Returns the total number of records for the specified expression."
          parameters:
           -
            description: "Expression to evaluate number of records for."
            kind: "REGULAR"
            name: "expression"
            type: "ANY"
          returnType: "BIGINT"
          sampleCodes:
           -
            call: "SELECT COUNT(column_name) FROM my_table"
            result: "89"
          snippetOverride: "COUNT(${1|ALL,DISTINCT|} ${2:value})"
      missingTypes:
       - "ANY"
      signaturesMatched:
       -
        description: "Returns the total number of records for the specified expression."
        parameters:
         -
          description: "Expression to evaluate number of records for."
          kind: "REGULAR"
          name: "expression"
          type: "ANY"
        returnType: "BIGINT"
        sampleCodes:
         -
          call: "SELECT COUNT(column_name) FROM my_table"
          result: "89"
        snippetOverride: "COUNT(${1|ALL,DISTINCT|} ${2:value})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "COUNT AGGREGATE WITH DISTINCT"
  input: "SELECT COUNT( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext:
      function:
        description: "Returns the total number of records for the specified expression."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "COUNT"
        signatures:
         -
          description: "Returns the total number of records in the dataset."
          parameters: []
          returnType: "BIGINT"
          sampleCodes:
           -
            call: "SELECT COUNT(*) FROM EMP"
            result: "93456745"
          snippetOverride: "COUNT(*)"
         -
          description: "Returns the total number of records for the specified expression."
          parameters:
           -
            description: "Expression to evaluate number of records for."
            kind: "REGULAR"
            name: "expression"
            type: "ANY"
          returnType: "BIGINT"
          sampleCodes:
           -
            call: "SELECT COUNT(column_name) FROM my_table"
            result: "89"
          snippetOverride: "COUNT(${1|ALL,DISTINCT|} ${2:value})"
      missingTypes:
       - "ANY"
      signaturesMatched:
       -
        description: "Returns the total number of records for the specified expression."
        parameters:
         -
          description: "Expression to evaluate number of records for."
          kind: "REGULAR"
          name: "expression"
          type: "ANY"
        returnType: "BIGINT"
        sampleCodes:
         -
          call: "SELECT COUNT(column_name) FROM my_table"
          result: "89"
        snippetOverride: "COUNT(${1|ALL,DISTINCT|} ${2:value})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "COUNT AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT COUNT( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "COLLECT AGGREGATE PARTIAL NAME"
  input: "SELECT COLLEC^"
  output:
    completions:
     -
      detail: "Returns a multiset of the values."
      insertText: "COLLECT(${1|ALL,DISTINCT|} ${2:expression})"
      kind: "Function"
      label: "COLLECT({ALL,DISTINCT} ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "COLLECT AGGREGATE ONLY NAME"
  input: "SELECT COLLECT( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext:
      function:
        description: "Returns a multiset of the values."
        functionCategories:
         - "AGGREGATE"
        name: "COLLECT"
        signatures:
         -
          description: "Collects the expression into a multiset."
          parameters:
           -
            description: "The expression to collect."
            kind: "REGULAR"
            name: "expression"
            type: "ANY"
          returnType: "ANY"
          snippetOverride: "COLLECT(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "ANY"
      signaturesMatched:
       -
        description: "Collects the expression into a multiset."
        parameters:
         -
          description: "The expression to collect."
          kind: "REGULAR"
          name: "expression"
          type: "ANY"
        returnType: "ANY"
        snippetOverride: "COLLECT(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "COLLECT AGGREGATE WITH ALL"
  input: "SELECT COLLECT( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext:
      function:
        description: "Returns a multiset of the values."
        functionCategories:
         - "AGGREGATE"
        name: "COLLECT"
        signatures:
         -
          description: "Collects the expression into a multiset."
          parameters:
           -
            description: "The expression to collect."
            kind: "REGULAR"
            name: "expression"
            type: "ANY"
          returnType: "ANY"
          snippetOverride: "COLLECT(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "ANY"
      signaturesMatched:
       -
        description: "Collects the expression into a multiset."
        parameters:
         -
          description: "The expression to collect."
          kind: "REGULAR"
          name: "expression"
          type: "ANY"
        returnType: "ANY"
        snippetOverride: "COLLECT(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "COLLECT AGGREGATE WITH DISTINCT"
  input: "SELECT COLLECT( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext:
      function:
        description: "Returns a multiset of the values."
        functionCategories:
         - "AGGREGATE"
        name: "COLLECT"
        signatures:
         -
          description: "Collects the expression into a multiset."
          parameters:
           -
            description: "The expression to collect."
            kind: "REGULAR"
            name: "expression"
            type: "ANY"
          returnType: "ANY"
          snippetOverride: "COLLECT(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "ANY"
      signaturesMatched:
       -
        description: "Collects the expression into a multiset."
        parameters:
         -
          description: "The expression to collect."
          kind: "REGULAR"
          name: "expression"
          type: "ANY"
        returnType: "ANY"
        snippetOverride: "COLLECT(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "COLLECT AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT COLLECT( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "MAX AGGREGATE PARTIAL NAME"
  input: "SELECT MA^"
  output:
    completions:
     -
      insertText: "MAPPIFY(${1:BOOLEAN})"
      kind: "Function"
      label: "MAPPIFY(???)"
     -
      detail: "Returns all keys from a map expression."
      insertText: "MAP_KEYS(${1:MAP})"
      kind: "Function"
      label: "MAP_KEYS(???)"
     -
      detail: "Returns all values from a map expression."
      insertText: "MAP_VALUES(${1:MAP})"
      kind: "Function"
      label: "MAP_VALUES(???)"
     -
      insertText: "MASK(${1:BOOLEAN})"
      kind: "Function"
      label: "MASK(???)"
     -
      insertText: "MASK(${1:BOOLEAN}, ${2:NUMERIC})"
      kind: "Function"
      label: "MASK(???, ???)"
    functionContext: null
    hasMoreResults: true
 -
  description: "MAX AGGREGATE ONLY NAME"
  input: "SELECT MAX( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the maximum value among the non-NULL input expressions."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "MAX"
        signatures:
         -
          description: "Maximum value of the input expression."
          parameters:
           -
            description: "The expression to take the max of across all rows."
            kind: "REGULAR"
            name: "expression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT MAX(column_name) FROM my_table"
            result: "Max of the values in the specified column."
          snippetOverride: "MAX(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Maximum value of the input expression."
        parameters:
         -
          description: "The expression to take the max of across all rows."
          kind: "REGULAR"
          name: "expression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT MAX(column_name) FROM my_table"
          result: "Max of the values in the specified column."
        snippetOverride: "MAX(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "MAX AGGREGATE WITH ALL"
  input: "SELECT MAX( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the maximum value among the non-NULL input expressions."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "MAX"
        signatures:
         -
          description: "Maximum value of the input expression."
          parameters:
           -
            description: "The expression to take the max of across all rows."
            kind: "REGULAR"
            name: "expression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT MAX(column_name) FROM my_table"
            result: "Max of the values in the specified column."
          snippetOverride: "MAX(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Maximum value of the input expression."
        parameters:
         -
          description: "The expression to take the max of across all rows."
          kind: "REGULAR"
          name: "expression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT MAX(column_name) FROM my_table"
          result: "Max of the values in the specified column."
        snippetOverride: "MAX(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "MAX AGGREGATE WITH DISTINCT"
  input: "SELECT MAX( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the maximum value among the non-NULL input expressions."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "MAX"
        signatures:
         -
          description: "Maximum value of the input expression."
          parameters:
           -
            description: "The expression to take the max of across all rows."
            kind: "REGULAR"
            name: "expression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT MAX(column_name) FROM my_table"
            result: "Max of the values in the specified column."
          snippetOverride: "MAX(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Maximum value of the input expression."
        parameters:
         -
          description: "The expression to take the max of across all rows."
          kind: "REGULAR"
          name: "expression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT MAX(column_name) FROM my_table"
          result: "Max of the values in the specified column."
        snippetOverride: "MAX(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "MAX AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT MAX( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "MIN AGGREGATE PARTIAL NAME"
  input: "SELECT MI^"
  output:
    completions:
     -
      detail: "Returns the minimum value among the non-NULL input expressions."
      insertText: "MIN(${1|ALL,DISTINCT|} ${2:expression})"
      kind: "Function"
      label: "MIN({ALL,DISTINCT} ???)"
     -
      detail: "Returns the name of a subdirectory of a table in HDFS. The subdirectory has the name that ranks lowest in case-sensitive alphanumeric order."
      insertText: "MINDIR(${1:CHARACTERS}, ${2:CHARACTERS}, ${3:CHARACTERS})"
      kind: "Function"
      label: "MINDIR(???, ???, ???)"
     -
      insertText: "MINUTE(${1:DATE})"
      kind: "Function"
      label: "MINUTE(???)"
     -
      kind: "Keyword"
      label: "MINUS"
    functionContext: null
    hasMoreResults: false
 -
  description: "MIN AGGREGATE ONLY NAME"
  input: "SELECT MIN( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext:
      function:
        description: "Returns the minimum value among the non-NULL input expressions."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "MIN"
        signatures:
         -
          description: "Minimum value of the input expressions."
          parameters:
           -
            description: "Input expression."
            kind: "REGULAR"
            name: "expression"
            type: "ANY"
          returnType: "ANY"
          sampleCodes:
           -
            call: "SELECT MIN(column_name)"
            result: "Min of the values in the specified column."
          snippetOverride: "MIN(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "ANY"
      signaturesMatched:
       -
        description: "Minimum value of the input expressions."
        parameters:
         -
          description: "Input expression."
          kind: "REGULAR"
          name: "expression"
          type: "ANY"
        returnType: "ANY"
        sampleCodes:
         -
          call: "SELECT MIN(column_name)"
          result: "Min of the values in the specified column."
        snippetOverride: "MIN(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "MIN AGGREGATE WITH ALL"
  input: "SELECT MIN( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext:
      function:
        description: "Returns the minimum value among the non-NULL input expressions."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "MIN"
        signatures:
         -
          description: "Minimum value of the input expressions."
          parameters:
           -
            description: "Input expression."
            kind: "REGULAR"
            name: "expression"
            type: "ANY"
          returnType: "ANY"
          sampleCodes:
           -
            call: "SELECT MIN(column_name)"
            result: "Min of the values in the specified column."
          snippetOverride: "MIN(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "ANY"
      signaturesMatched:
       -
        description: "Minimum value of the input expressions."
        parameters:
         -
          description: "Input expression."
          kind: "REGULAR"
          name: "expression"
          type: "ANY"
        returnType: "ANY"
        sampleCodes:
         -
          call: "SELECT MIN(column_name)"
          result: "Min of the values in the specified column."
        snippetOverride: "MIN(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "MIN AGGREGATE WITH DISTINCT"
  input: "SELECT MIN( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext:
      function:
        description: "Returns the minimum value among the non-NULL input expressions."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "MIN"
        signatures:
         -
          description: "Minimum value of the input expressions."
          parameters:
           -
            description: "Input expression."
            kind: "REGULAR"
            name: "expression"
            type: "ANY"
          returnType: "ANY"
          sampleCodes:
           -
            call: "SELECT MIN(column_name)"
            result: "Min of the values in the specified column."
          snippetOverride: "MIN(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "ANY"
      signaturesMatched:
       -
        description: "Minimum value of the input expressions."
        parameters:
         -
          description: "Input expression."
          kind: "REGULAR"
          name: "expression"
          type: "ANY"
        returnType: "ANY"
        sampleCodes:
         -
          call: "SELECT MIN(column_name)"
          result: "Min of the values in the specified column."
        snippetOverride: "MIN(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "MIN AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT MIN( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "STDDEV AGGREGATE PARTIAL NAME"
  input: "SELECT STDDE^"
  output:
    completions:
     -
      detail: "Synonym for STDDEV_SAMP"
      insertText: "STDDEV(${1|ALL,DISTINCT|} ${2:expression})"
      kind: "Function"
      label: "STDDEV({ALL,DISTINCT} ???)"
     -
      detail: "Returns the population standard deviation of numeric across all input values."
      insertText: "STDDEV_POP(${1|ALL,DISTINCT|} ${2:expression})"
      kind: "Function"
      label: "STDDEV_POP({ALL,DISTINCT} ???)"
     -
      detail: "Returns the sample standard deviation of numeric across all input values."
      insertText: "STDDEV_SAMP(${1|ALL,DISTINCT|} ${2:expression})"
      kind: "Function"
      label: "STDDEV_SAMP({ALL,DISTINCT} ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "STDDEV AGGREGATE ONLY NAME"
  input: "SELECT STDDEV( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Synonym for STDDEV_SAMP"
        functionCategories:
         - "AGGREGATE"
         - "MATH"
        name: "STDDEV"
        signatures:
         -
          description: "Returns the sample standard deviation of the expression across all input values."
          parameters:
           -
            description: "The expression to take the sample standard deviation of."
            kind: "REGULAR"
            name: "numericExpression"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT STDDEV(ALL MY_EXPRESSION) FROM MY_TABLE"
            result: "42"
          snippetOverride: "STDDEV(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the sample standard deviation of the expression across all input values."
        parameters:
         -
          description: "The expression to take the sample standard deviation of."
          kind: "REGULAR"
          name: "numericExpression"
          type: "NUMERIC"
        returnType: "DOUBLE"
        sampleCodes:
         -
          call: "SELECT STDDEV(ALL MY_EXPRESSION) FROM MY_TABLE"
          result: "42"
        snippetOverride: "STDDEV(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "STDDEV AGGREGATE WITH ALL"
  input: "SELECT STDDEV( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Synonym for STDDEV_SAMP"
        functionCategories:
         - "AGGREGATE"
         - "MATH"
        name: "STDDEV"
        signatures:
         -
          description: "Returns the sample standard deviation of the expression across all input values."
          parameters:
           -
            description: "The expression to take the sample standard deviation of."
            kind: "REGULAR"
            name: "numericExpression"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT STDDEV(ALL MY_EXPRESSION) FROM MY_TABLE"
            result: "42"
          snippetOverride: "STDDEV(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the sample standard deviation of the expression across all input values."
        parameters:
         -
          description: "The expression to take the sample standard deviation of."
          kind: "REGULAR"
          name: "numericExpression"
          type: "NUMERIC"
        returnType: "DOUBLE"
        sampleCodes:
         -
          call: "SELECT STDDEV(ALL MY_EXPRESSION) FROM MY_TABLE"
          result: "42"
        snippetOverride: "STDDEV(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "STDDEV AGGREGATE WITH DISTINCT"
  input: "SELECT STDDEV( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Synonym for STDDEV_SAMP"
        functionCategories:
         - "AGGREGATE"
         - "MATH"
        name: "STDDEV"
        signatures:
         -
          description: "Returns the sample standard deviation of the expression across all input values."
          parameters:
           -
            description: "The expression to take the sample standard deviation of."
            kind: "REGULAR"
            name: "numericExpression"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT STDDEV(ALL MY_EXPRESSION) FROM MY_TABLE"
            result: "42"
          snippetOverride: "STDDEV(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the sample standard deviation of the expression across all input values."
        parameters:
         -
          description: "The expression to take the sample standard deviation of."
          kind: "REGULAR"
          name: "numericExpression"
          type: "NUMERIC"
        returnType: "DOUBLE"
        sampleCodes:
         -
          call: "SELECT STDDEV(ALL MY_EXPRESSION) FROM MY_TABLE"
          result: "42"
        snippetOverride: "STDDEV(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "STDDEV AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT STDDEV( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "STDDEV_POP AGGREGATE PARTIAL NAME"
  input: "SELECT STDDEV_PO^"
  output:
    completions:
     -
      detail: "Returns the population standard deviation of numeric across all input values."
      insertText: "STDDEV_POP(${1|ALL,DISTINCT|} ${2:expression})"
      kind: "Function"
      label: "STDDEV_POP({ALL,DISTINCT} ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "STDDEV_POP AGGREGATE ONLY NAME"
  input: "SELECT STDDEV_POP( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the population standard deviation of numeric across all input values."
        functionCategories:
         - "AGGREGATE"
         - "MATH"
        name: "STDDEV_POP"
        signatures:
         -
          description: "Returns the population standard deviation of numeric across all input values."
          parameters:
           -
            description: "The expression to take the population standard deviation of."
            kind: "REGULAR"
            name: "numericExpression"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT STDDEV_POP(ALL MY_COLUMN) FROM MY_TABLE"
            result: "42"
          snippetOverride: "STDDEV_POP(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the population standard deviation of numeric across all input values."
        parameters:
         -
          description: "The expression to take the population standard deviation of."
          kind: "REGULAR"
          name: "numericExpression"
          type: "NUMERIC"
        returnType: "DOUBLE"
        sampleCodes:
         -
          call: "SELECT STDDEV_POP(ALL MY_COLUMN) FROM MY_TABLE"
          result: "42"
        snippetOverride: "STDDEV_POP(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "STDDEV_POP AGGREGATE WITH ALL"
  input: "SELECT STDDEV_POP( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the population standard deviation of numeric across all input values."
        functionCategories:
         - "AGGREGATE"
         - "MATH"
        name: "STDDEV_POP"
        signatures:
         -
          description: "Returns the population standard deviation of numeric across all input values."
          parameters:
           -
            description: "The expression to take the population standard deviation of."
            kind: "REGULAR"
            name: "numericExpression"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT STDDEV_POP(ALL MY_COLUMN) FROM MY_TABLE"
            result: "42"
          snippetOverride: "STDDEV_POP(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the population standard deviation of numeric across all input values."
        parameters:
         -
          description: "The expression to take the population standard deviation of."
          kind: "REGULAR"
          name: "numericExpression"
          type: "NUMERIC"
        returnType: "DOUBLE"
        sampleCodes:
         -
          call: "SELECT STDDEV_POP(ALL MY_COLUMN) FROM MY_TABLE"
          result: "42"
        snippetOverride: "STDDEV_POP(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "STDDEV_POP AGGREGATE WITH DISTINCT"
  input: "SELECT STDDEV_POP( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the population standard deviation of numeric across all input values."
        functionCategories:
         - "AGGREGATE"
         - "MATH"
        name: "STDDEV_POP"
        signatures:
         -
          description: "Returns the population standard deviation of numeric across all input values."
          parameters:
           -
            description: "The expression to take the population standard deviation of."
            kind: "REGULAR"
            name: "numericExpression"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT STDDEV_POP(ALL MY_COLUMN) FROM MY_TABLE"
            result: "42"
          snippetOverride: "STDDEV_POP(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the population standard deviation of numeric across all input values."
        parameters:
         -
          description: "The expression to take the population standard deviation of."
          kind: "REGULAR"
          name: "numericExpression"
          type: "NUMERIC"
        returnType: "DOUBLE"
        sampleCodes:
         -
          call: "SELECT STDDEV_POP(ALL MY_COLUMN) FROM MY_TABLE"
          result: "42"
        snippetOverride: "STDDEV_POP(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "STDDEV_POP AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT STDDEV_POP( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "STDDEV_SAMP AGGREGATE PARTIAL NAME"
  input: "SELECT STDDEV_SAM^"
  output:
    completions:
     -
      detail: "Returns the sample standard deviation of numeric across all input values."
      insertText: "STDDEV_SAMP(${1|ALL,DISTINCT|} ${2:expression})"
      kind: "Function"
      label: "STDDEV_SAMP({ALL,DISTINCT} ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "STDDEV_SAMP AGGREGATE ONLY NAME"
  input: "SELECT STDDEV_SAMP( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the sample standard deviation of numeric across all input values."
        functionCategories:
         - "AGGREGATE"
         - "MATH"
        name: "STDDEV_SAMP"
        signatures:
         -
          description: "Returns the sample standard deviation of numeric across all input values."
          parameters:
           -
            description: "The expression to take the sample standard deviation of."
            kind: "REGULAR"
            name: "numericExpression"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT STDDEV_SAMP(ALL MY_COLUMN) FROM MY_TABLE"
            result: "42"
          snippetOverride: "STDDEV_SAMP(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the sample standard deviation of numeric across all input values."
        parameters:
         -
          description: "The expression to take the sample standard deviation of."
          kind: "REGULAR"
          name: "numericExpression"
          type: "NUMERIC"
        returnType: "DOUBLE"
        sampleCodes:
         -
          call: "SELECT STDDEV_SAMP(ALL MY_COLUMN) FROM MY_TABLE"
          result: "42"
        snippetOverride: "STDDEV_SAMP(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "STDDEV_SAMP AGGREGATE WITH ALL"
  input: "SELECT STDDEV_SAMP( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the sample standard deviation of numeric across all input values."
        functionCategories:
         - "AGGREGATE"
         - "MATH"
        name: "STDDEV_SAMP"
        signatures:
         -
          description: "Returns the sample standard deviation of numeric across all input values."
          parameters:
           -
            description: "The expression to take the sample standard deviation of."
            kind: "REGULAR"
            name: "numericExpression"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT STDDEV_SAMP(ALL MY_COLUMN) FROM MY_TABLE"
            result: "42"
          snippetOverride: "STDDEV_SAMP(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the sample standard deviation of numeric across all input values."
        parameters:
         -
          description: "The expression to take the sample standard deviation of."
          kind: "REGULAR"
          name: "numericExpression"
          type: "NUMERIC"
        returnType: "DOUBLE"
        sampleCodes:
         -
          call: "SELECT STDDEV_SAMP(ALL MY_COLUMN) FROM MY_TABLE"
          result: "42"
        snippetOverride: "STDDEV_SAMP(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "STDDEV_SAMP AGGREGATE WITH DISTINCT"
  input: "SELECT STDDEV_SAMP( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the sample standard deviation of numeric across all input values."
        functionCategories:
         - "AGGREGATE"
         - "MATH"
        name: "STDDEV_SAMP"
        signatures:
         -
          description: "Returns the sample standard deviation of numeric across all input values."
          parameters:
           -
            description: "The expression to take the sample standard deviation of."
            kind: "REGULAR"
            name: "numericExpression"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT STDDEV_SAMP(ALL MY_COLUMN) FROM MY_TABLE"
            result: "42"
          snippetOverride: "STDDEV_SAMP(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the sample standard deviation of numeric across all input values."
        parameters:
         -
          description: "The expression to take the sample standard deviation of."
          kind: "REGULAR"
          name: "numericExpression"
          type: "NUMERIC"
        returnType: "DOUBLE"
        sampleCodes:
         -
          call: "SELECT STDDEV_SAMP(ALL MY_COLUMN) FROM MY_TABLE"
          result: "42"
        snippetOverride: "STDDEV_SAMP(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "STDDEV_SAMP AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT STDDEV_SAMP( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "SUM AGGREGATE PARTIAL NAME"
  input: "SELECT SU^"
  output:
    completions:
     -
      detail: "Returns the portion of the STRING from the specified base expression starting at the specified characters."
      insertText: "SUBSTRING(${1:stringValue} FROM ${2:startIndex})"
      kind: "Function"
      label: "SUBSTRING(??? FROM ???)"
     -
      detail: "Returns the portion of the STRING from the specified base expression starting at the specified characters."
      insertText: "SUBSTRING(${1:CHARACTERS}, ${2:CHARACTERS})"
      kind: "Function"
      label: "SUBSTRING(???, ???)"
     -
      detail: "Returns the portion of the STRING from the specified base expression starting at the specified characters."
      insertText: "SUBSTRING(${1:stringValue} FROM ${2:startIndex} FOR ${3:length})"
      kind: "Function"
      label: "SUBSTRING(??? FROM ??? FOR ???)"
     -
      insertText: "SUBSTRING_INDEX(${1:CHARACTERS}, ${2:CHARACTERS}, ${3:INT})"
      kind: "Function"
      label: "SUBSTRING_INDEX(???, ???, ???)"
     -
      detail: "Returns the sum of non-NULL input expressions."
      insertText: "SUM(${1|ALL,DISTINCT|} ${2:expression})"
      kind: "Function"
      label: "SUM({ALL,DISTINCT} ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "SUM AGGREGATE ONLY NAME"
  input: "SELECT SUM( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the sum of non-NULL input expressions."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "SUM"
        signatures:
         -
          description: "Returns the sum of non-NULL input expressions."
          parameters:
           -
            description: "Numeric input expression."
            kind: "REGULAR"
            name: "numeric_expression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT SUM(column_name) FROM my_table"
            result: "Sum of the values in the specified column."
          snippetOverride: "SUM(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the sum of non-NULL input expressions."
        parameters:
         -
          description: "Numeric input expression."
          kind: "REGULAR"
          name: "numeric_expression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT SUM(column_name) FROM my_table"
          result: "Sum of the values in the specified column."
        snippetOverride: "SUM(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "SUM AGGREGATE WITH ALL"
  input: "SELECT SUM( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the sum of non-NULL input expressions."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "SUM"
        signatures:
         -
          description: "Returns the sum of non-NULL input expressions."
          parameters:
           -
            description: "Numeric input expression."
            kind: "REGULAR"
            name: "numeric_expression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT SUM(column_name) FROM my_table"
            result: "Sum of the values in the specified column."
          snippetOverride: "SUM(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the sum of non-NULL input expressions."
        parameters:
         -
          description: "Numeric input expression."
          kind: "REGULAR"
          name: "numeric_expression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT SUM(column_name) FROM my_table"
          result: "Sum of the values in the specified column."
        snippetOverride: "SUM(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "SUM AGGREGATE WITH DISTINCT"
  input: "SELECT SUM( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the sum of non-NULL input expressions."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "SUM"
        signatures:
         -
          description: "Returns the sum of non-NULL input expressions."
          parameters:
           -
            description: "Numeric input expression."
            kind: "REGULAR"
            name: "numeric_expression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT SUM(column_name) FROM my_table"
            result: "Sum of the values in the specified column."
          snippetOverride: "SUM(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the sum of non-NULL input expressions."
        parameters:
         -
          description: "Numeric input expression."
          kind: "REGULAR"
          name: "numeric_expression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT SUM(column_name) FROM my_table"
          result: "Sum of the values in the specified column."
        snippetOverride: "SUM(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "SUM AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT SUM( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "VAR_POP AGGREGATE PARTIAL NAME"
  input: "SELECT VAR_PO^"
  output:
    completions:
     -
      detail: "Returns the population variance of non-NULL records."
      insertText: "VAR_POP(${1|ALL,DISTINCT|} ${2:expression})"
      kind: "Function"
      label: "VAR_POP({ALL,DISTINCT} ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "VAR_POP AGGREGATE ONLY NAME"
  input: "SELECT VAR_POP( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the population variance of non-NULL records."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "VAR_POP"
        signatures:
         -
          description: "Returns the population variance of the records."
          parameters:
           -
            description: "The set of records to calculate variance for."
            kind: "REGULAR"
            name: "numeric_expression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT VAR_POP(ALL pop) FROM \"zips.json\""
            result: "1.5167869917122573E8"
          snippetOverride: "VAR_POP(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the population variance of the records."
        parameters:
         -
          description: "The set of records to calculate variance for."
          kind: "REGULAR"
          name: "numeric_expression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT VAR_POP(ALL pop) FROM \"zips.json\""
          result: "1.5167869917122573E8"
        snippetOverride: "VAR_POP(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "VAR_POP AGGREGATE WITH ALL"
  input: "SELECT VAR_POP( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the population variance of non-NULL records."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "VAR_POP"
        signatures:
         -
          description: "Returns the population variance of the records."
          parameters:
           -
            description: "The set of records to calculate variance for."
            kind: "REGULAR"
            name: "numeric_expression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT VAR_POP(ALL pop) FROM \"zips.json\""
            result: "1.5167869917122573E8"
          snippetOverride: "VAR_POP(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the population variance of the records."
        parameters:
         -
          description: "The set of records to calculate variance for."
          kind: "REGULAR"
          name: "numeric_expression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT VAR_POP(ALL pop) FROM \"zips.json\""
          result: "1.5167869917122573E8"
        snippetOverride: "VAR_POP(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "VAR_POP AGGREGATE WITH DISTINCT"
  input: "SELECT VAR_POP( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the population variance of non-NULL records."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "VAR_POP"
        signatures:
         -
          description: "Returns the population variance of the records."
          parameters:
           -
            description: "The set of records to calculate variance for."
            kind: "REGULAR"
            name: "numeric_expression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT VAR_POP(ALL pop) FROM \"zips.json\""
            result: "1.5167869917122573E8"
          snippetOverride: "VAR_POP(${1|ALL,DISTINCT|} ${2:expression})"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the population variance of the records."
        parameters:
         -
          description: "The set of records to calculate variance for."
          kind: "REGULAR"
          name: "numeric_expression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT VAR_POP(ALL pop) FROM \"zips.json\""
          result: "1.5167869917122573E8"
        snippetOverride: "VAR_POP(${1|ALL,DISTINCT|} ${2:expression})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "VAR_POP AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT VAR_POP( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "VAR_SAMP AGGREGATE PARTIAL NAME"
  input: "SELECT VAR_SAM^"
  output:
    completions:
     -
      detail: "Returns the sample variance of non-NULL records."
      insertText: "VAR_SAMP(${1:NUMERIC})"
      kind: "Function"
      label: "VAR_SAMP(???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "VAR_SAMP AGGREGATE ONLY NAME"
  input: "SELECT VAR_SAMP( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the sample variance of non-NULL records."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "VAR_SAMP"
        signatures:
         -
          description: "Returns the sample variance of the records."
          parameters:
           -
            description: "The set of records to calculate variance for."
            kind: "REGULAR"
            name: "numeric_expression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT VAR_SAMP(passenger_count) FROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\""
            result: "1.868747683518558"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the sample variance of the records."
        parameters:
         -
          description: "The set of records to calculate variance for."
          kind: "REGULAR"
          name: "numeric_expression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT VAR_SAMP(passenger_count) FROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\""
          result: "1.868747683518558"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "VAR_SAMP AGGREGATE WITH ALL"
  input: "SELECT VAR_SAMP( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the sample variance of non-NULL records."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "VAR_SAMP"
        signatures:
         -
          description: "Returns the sample variance of the records."
          parameters:
           -
            description: "The set of records to calculate variance for."
            kind: "REGULAR"
            name: "numeric_expression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT VAR_SAMP(passenger_count) FROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\""
            result: "1.868747683518558"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the sample variance of the records."
        parameters:
         -
          description: "The set of records to calculate variance for."
          kind: "REGULAR"
          name: "numeric_expression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT VAR_SAMP(passenger_count) FROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\""
          result: "1.868747683518558"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "VAR_SAMP AGGREGATE WITH DISTINCT"
  input: "SELECT VAR_SAMP( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "MGR"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.MGR"
      kind: "Column"
      label: "MGR"
     -
      data:
        column:
          name: "SAL"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.SAL"
      kind: "Column"
      label: "SAL"
    functionContext:
      function:
        description: "Returns the sample variance of non-NULL records."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "VAR_SAMP"
        signatures:
         -
          description: "Returns the sample variance of the records."
          parameters:
           -
            description: "The set of records to calculate variance for."
            kind: "REGULAR"
            name: "numeric_expression"
            type: "NUMERIC"
          returnType: "NUMERIC"
          sampleCodes:
           -
            call: "SELECT VAR_SAMP(passenger_count) FROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\""
            result: "1.868747683518558"
      missingTypes:
       - "NUMERIC"
      signaturesMatched:
       -
        description: "Returns the sample variance of the records."
        parameters:
         -
          description: "The set of records to calculate variance for."
          kind: "REGULAR"
          name: "numeric_expression"
          type: "NUMERIC"
        returnType: "NUMERIC"
        sampleCodes:
         -
          call: "SELECT VAR_SAMP(passenger_count) FROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\""
          result: "1.868747683518558"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "VAR_SAMP AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT VAR_SAMP( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "LISTAGG AGGREGATE PARTIAL NAME"
  input: "SELECT LISTAG^"
  output:
    completions:
     -
      detail: "Returns values concatenated into a string, delimited by separator (default ‘,’)"
      insertText: "LISTAGG(${1|ALL,DISTINCT|} ${2:characterExpression})"
      kind: "Function"
      label: "LISTAGG({ALL,DISTINCT} ???)"
     -
      detail: "Returns values concatenated into a string, delimited by separator (default ‘,’)"
      insertText: "LISTAGG(${1|ALL,DISTINCT|} ${2:characterExpression}, ${3:separator})"
      kind: "Function"
      label: "LISTAGG({ALL,DISTINCT} ???, ???)"
     -
      insertText: "LISTAGG_MERGE(${1:STRING}, ${2:STRING})"
      kind: "Function"
      label: "LISTAGG_MERGE(???, ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "LISTAGG AGGREGATE ONLY NAME"
  input: "SELECT LISTAGG( ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "JOB"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.JOB"
      kind: "Column"
      label: "JOB"
     -
      insertText: "AES_DECRYPT(${1:CHARACTERS}, ${2:CHARACTERS})"
      kind: "Function"
      label: "AES_DECRYPT(???, ???)"
     -
      insertText: "AES_ENCRYPT(${1:CHARACTERS}, ${2:CHARACTERS})"
      kind: "Function"
      label: "AES_ENCRYPT(???, ???)"
     -
      insertText: "BIN(${1:INT})"
      kind: "Function"
      label: "BIN(???)"
    functionContext:
      function:
        description: "Returns values concatenated into a string, delimited by separator (default ‘,’)"
        functionCategories:
         - "AGGREGATE"
         - "CHARACTER"
        name: "LISTAGG"
        signatures:
         -
          description: "Returns values concatenated into a string, delimited by comma separator."
          parameters:
           -
            description: "The expression to concatenate across all rows."
            kind: "REGULAR"
            name: "characterExpression"
            type: "CHARACTERS"
          returnType: "CHARACTERS"
          sampleCodes:
           -
            call: "SELECT LISTAGG(MY_COLUMN)"
            result: "'Hello,World'"
          snippetOverride: "LISTAGG(${1|ALL,DISTINCT|} ${2:characterExpression})"
         -
          description: "Returns values concatenated into a string, delimited by separator of your choice."
          parameters:
           -
            description: "The expression to concatenate across all rows."
            kind: "REGULAR"
            name: "characterExpression"
            type: "CHARACTERS"
           -
            description: "The separator to use for delimiting the string."
            kind: "REGULAR"
            name: "separator"
            type: "STRING"
          returnType: "CHARACTERS"
          sampleCodes:
           -
            call: "SELECT LISTAGG(MY_COLUMN, '-')"
            result: "Hello-World"
          snippetOverride: "LISTAGG(${1|ALL,DISTINCT|} ${2:characterExpression}, ${3:separator})"
      missingTypes:
       - "CHARACTERS"
      signaturesMatched:
       -
        description: "Returns values concatenated into a string, delimited by comma separator."
        parameters:
         -
          description: "The expression to concatenate across all rows."
          kind: "REGULAR"
          name: "characterExpression"
          type: "CHARACTERS"
        returnType: "CHARACTERS"
        sampleCodes:
         -
          call: "SELECT LISTAGG(MY_COLUMN)"
          result: "'Hello,World'"
        snippetOverride: "LISTAGG(${1|ALL,DISTINCT|} ${2:characterExpression})"
       -
        description: "Returns values concatenated into a string, delimited by separator of your choice."
        parameters:
         -
          description: "The expression to concatenate across all rows."
          kind: "REGULAR"
          name: "characterExpression"
          type: "CHARACTERS"
         -
          description: "The separator to use for delimiting the string."
          kind: "REGULAR"
          name: "separator"
          type: "STRING"
        returnType: "CHARACTERS"
        sampleCodes:
         -
          call: "SELECT LISTAGG(MY_COLUMN, '-')"
          result: "Hello-World"
        snippetOverride: "LISTAGG(${1|ALL,DISTINCT|} ${2:characterExpression}, ${3:separator})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "LISTAGG AGGREGATE WITH ALL"
  input: "SELECT LISTAGG( ALL ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "JOB"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.JOB"
      kind: "Column"
      label: "JOB"
     -
      insertText: "AES_DECRYPT(${1:CHARACTERS}, ${2:CHARACTERS})"
      kind: "Function"
      label: "AES_DECRYPT(???, ???)"
     -
      insertText: "AES_ENCRYPT(${1:CHARACTERS}, ${2:CHARACTERS})"
      kind: "Function"
      label: "AES_ENCRYPT(???, ???)"
     -
      insertText: "BIN(${1:INT})"
      kind: "Function"
      label: "BIN(???)"
    functionContext:
      function:
        description: "Returns values concatenated into a string, delimited by separator (default ‘,’)"
        functionCategories:
         - "AGGREGATE"
         - "CHARACTER"
        name: "LISTAGG"
        signatures:
         -
          description: "Returns values concatenated into a string, delimited by comma separator."
          parameters:
           -
            description: "The expression to concatenate across all rows."
            kind: "REGULAR"
            name: "characterExpression"
            type: "CHARACTERS"
          returnType: "CHARACTERS"
          sampleCodes:
           -
            call: "SELECT LISTAGG(MY_COLUMN)"
            result: "'Hello,World'"
          snippetOverride: "LISTAGG(${1|ALL,DISTINCT|} ${2:characterExpression})"
         -
          description: "Returns values concatenated into a string, delimited by separator of your choice."
          parameters:
           -
            description: "The expression to concatenate across all rows."
            kind: "REGULAR"
            name: "characterExpression"
            type: "CHARACTERS"
           -
            description: "The separator to use for delimiting the string."
            kind: "REGULAR"
            name: "separator"
            type: "STRING"
          returnType: "CHARACTERS"
          sampleCodes:
           -
            call: "SELECT LISTAGG(MY_COLUMN, '-')"
            result: "Hello-World"
          snippetOverride: "LISTAGG(${1|ALL,DISTINCT|} ${2:characterExpression}, ${3:separator})"
      missingTypes:
       - "CHARACTERS"
      signaturesMatched:
       -
        description: "Returns values concatenated into a string, delimited by comma separator."
        parameters:
         -
          description: "The expression to concatenate across all rows."
          kind: "REGULAR"
          name: "characterExpression"
          type: "CHARACTERS"
        returnType: "CHARACTERS"
        sampleCodes:
         -
          call: "SELECT LISTAGG(MY_COLUMN)"
          result: "'Hello,World'"
        snippetOverride: "LISTAGG(${1|ALL,DISTINCT|} ${2:characterExpression})"
       -
        description: "Returns values concatenated into a string, delimited by separator of your choice."
        parameters:
         -
          description: "The expression to concatenate across all rows."
          kind: "REGULAR"
          name: "characterExpression"
          type: "CHARACTERS"
         -
          description: "The separator to use for delimiting the string."
          kind: "REGULAR"
          name: "separator"
          type: "STRING"
        returnType: "CHARACTERS"
        sampleCodes:
         -
          call: "SELECT LISTAGG(MY_COLUMN, '-')"
          result: "Hello-World"
        snippetOverride: "LISTAGG(${1|ALL,DISTINCT|} ${2:characterExpression}, ${3:separator})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "LISTAGG AGGREGATE WITH DISTINCT"
  input: "SELECT LISTAGG( DISTINCT ^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "JOB"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.JOB"
      kind: "Column"
      label: "JOB"
     -
      insertText: "AES_DECRYPT(${1:CHARACTERS}, ${2:CHARACTERS})"
      kind: "Function"
      label: "AES_DECRYPT(???, ???)"
     -
      insertText: "AES_ENCRYPT(${1:CHARACTERS}, ${2:CHARACTERS})"
      kind: "Function"
      label: "AES_ENCRYPT(???, ???)"
     -
      insertText: "BIN(${1:INT})"
      kind: "Function"
      label: "BIN(???)"
    functionContext:
      function:
        description: "Returns values concatenated into a string, delimited by separator (default ‘,’)"
        functionCategories:
         - "AGGREGATE"
         - "CHARACTER"
        name: "LISTAGG"
        signatures:
         -
          description: "Returns values concatenated into a string, delimited by comma separator."
          parameters:
           -
            description: "The expression to concatenate across all rows."
            kind: "REGULAR"
            name: "characterExpression"
            type: "CHARACTERS"
          returnType: "CHARACTERS"
          sampleCodes:
           -
            call: "SELECT LISTAGG(MY_COLUMN)"
            result: "'Hello,World'"
          snippetOverride: "LISTAGG(${1|ALL,DISTINCT|} ${2:characterExpression})"
         -
          description: "Returns values concatenated into a string, delimited by separator of your choice."
          parameters:
           -
            description: "The expression to concatenate across all rows."
            kind: "REGULAR"
            name: "characterExpression"
            type: "CHARACTERS"
           -
            description: "The separator to use for delimiting the string."
            kind: "REGULAR"
            name: "separator"
            type: "STRING"
          returnType: "CHARACTERS"
          sampleCodes:
           -
            call: "SELECT LISTAGG(MY_COLUMN, '-')"
            result: "Hello-World"
          snippetOverride: "LISTAGG(${1|ALL,DISTINCT|} ${2:characterExpression}, ${3:separator})"
      missingTypes:
       - "CHARACTERS"
      signaturesMatched:
       -
        description: "Returns values concatenated into a string, delimited by comma separator."
        parameters:
         -
          description: "The expression to concatenate across all rows."
          kind: "REGULAR"
          name: "characterExpression"
          type: "CHARACTERS"
        returnType: "CHARACTERS"
        sampleCodes:
         -
          call: "SELECT LISTAGG(MY_COLUMN)"
          result: "'Hello,World'"
        snippetOverride: "LISTAGG(${1|ALL,DISTINCT|} ${2:characterExpression})"
       -
        description: "Returns values concatenated into a string, delimited by separator of your choice."
        parameters:
         -
          description: "The expression to concatenate across all rows."
          kind: "REGULAR"
          name: "characterExpression"
          type: "CHARACTERS"
         -
          description: "The separator to use for delimiting the string."
          kind: "REGULAR"
          name: "separator"
          type: "STRING"
        returnType: "CHARACTERS"
        sampleCodes:
         -
          call: "SELECT LISTAGG(MY_COLUMN, '-')"
          result: "Hello-World"
        snippetOverride: "LISTAGG(${1|ALL,DISTINCT|} ${2:characterExpression}, ${3:separator})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "LISTAGG AGGREGATE WITH DISTINCT VALUE"
  input: "SELECT LISTAGG( DISTINCT EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "COMMA SEPARATED PARTIAL NAME"
  input: "SELECT COVAR_PO^"
  output:
    completions:
     -
      detail: "Returns the population covariance for non-NULL pairs across all input values."
      insertText: "COVAR_POP(${1:NUMERIC}, ${2:NUMERIC})"
      kind: "Function"
      label: "COVAR_POP(???, ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "COMMA SEPARATED NAME WITH ONE PARAMETER"
  input: "SELECT COVAR_POP(EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "COMMA SEPARATED NAME WITH ONE PARAMETER COMMA"
  input: "SELECT COVAR_POP(EMP.ENAME, ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: "("
     -
      kind: "Keyword"
      label: "MULTISET"
     -
      kind: "Keyword"
      label: "+"
     -
      kind: "Keyword"
      label: "-"
     -
      kind: "Keyword"
      label: "?"
    functionContext:
      function:
        description: "Returns the population covariance for non-NULL pairs across all input values."
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "COVAR_POP"
        signatures:
         -
          parameters:
           -
            description: "An expression that evaluates to a numeric type. This parameter is the dependent value."
            kind: "REGULAR"
            name: "expression1"
            type: "NUMERIC"
           -
            description: "An expression that evaluates to a numeric type. This parameter is the independent value."
            kind: "REGULAR"
            name: "expression2"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT COVAR_POP(trip_distance_mi, fare_amount)\nFROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\"\n"
            result: "31.70536771189994"
           -
            call: "SELECT COVAR_POP(DISTINCT trip_distance_mi, fare_amount)\nFROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\"\n"
            result: "302.59280681444307"
           -
            call: "SELECT COVAR_POP(trip_distance_mi, fare_amount)\n  OVER (PARTITION BY trip_distance_mi)\nFROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\"\n"
            result: "1.5543122344752192e-15"
      missingTypes: []
      signaturesMatched: []
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor:
         - "CHARACTERS"
    hasMoreResults: true
 -
  description: "COMMA SEPARATED WITH SECOND PARAMETER"
  input: "SELECT COVAR_POP(^ , EMP.ENAME) FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: "SELECT"
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "VALUES"
     -
      kind: "Keyword"
      label: "*"
     -
      kind: "Keyword"
      label: "CASE"
    functionContext:
      function:
        description: "Returns the population covariance for non-NULL pairs across all input values."
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "COVAR_POP"
        signatures:
         -
          parameters:
           -
            description: "An expression that evaluates to a numeric type. This parameter is the dependent value."
            kind: "REGULAR"
            name: "expression1"
            type: "NUMERIC"
           -
            description: "An expression that evaluates to a numeric type. This parameter is the independent value."
            kind: "REGULAR"
            name: "expression2"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT COVAR_POP(trip_distance_mi, fare_amount)\nFROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\"\n"
            result: "31.70536771189994"
           -
            call: "SELECT COVAR_POP(DISTINCT trip_distance_mi, fare_amount)\nFROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\"\n"
            result: "302.59280681444307"
           -
            call: "SELECT COVAR_POP(trip_distance_mi, fare_amount)\n  OVER (PARTITION BY trip_distance_mi)\nFROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\"\n"
            result: "1.5543122344752192e-15"
      missingTypes: []
      signaturesMatched: []
      suppliedParameterTypes:
        afterCursor:
         - "CHARACTERS"
        beforeCursor: []
    hasMoreResults: true
 -
  description: "COMMA SEPARATED PARTIAL NAME"
  input: "SELECT COVAR_SAM^"
  output:
    completions:
     -
      detail: "Returns the sample covariance for non-NULL pairs across all input values."
      insertText: "COVAR_SAMP(${1:NUMERIC}, ${2:NUMERIC})"
      kind: "Function"
      label: "COVAR_SAMP(???, ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "COMMA SEPARATED NAME WITH ONE PARAMETER"
  input: "SELECT COVAR_SAMP(EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "COMMA SEPARATED NAME WITH ONE PARAMETER COMMA"
  input: "SELECT COVAR_SAMP(EMP.ENAME, ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: "("
     -
      kind: "Keyword"
      label: "MULTISET"
     -
      kind: "Keyword"
      label: "+"
     -
      kind: "Keyword"
      label: "-"
     -
      kind: "Keyword"
      label: "?"
    functionContext:
      function:
        description: "Returns the sample covariance for non-NULL pairs across all input values."
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "COVAR_SAMP"
        signatures:
         -
          parameters:
           -
            description: "An expression that evaluates to a numeric type. This parameter is the dependent value."
            kind: "REGULAR"
            name: "expression1"
            type: "NUMERIC"
           -
            description: "An expression that evaluates to a numeric type. This parameter is the independent value."
            kind: "REGULAR"
            name: "expression2"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT COVAR_POP(trip_distance_mi, fare_amount)\nFROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\"\n"
            result: "31.70536780565699"
           -
            call: "SELECT COVAR_POP(DISTINCT trip_distance_mi, fare_amount)\nFROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\"\n"
            result: "31.7053678056971"
           -
            call: "SELECT COVAR_POP(trip_distance_mi, fare_amount)\n  OVER (PARTITION BY trip_distance_mi)\nFROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\"\n"
            result: "2.442515362986122e-15"
      missingTypes: []
      signaturesMatched: []
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor:
         - "CHARACTERS"
    hasMoreResults: true
 -
  description: "COMMA SEPARATED WITH SECOND PARAMETER"
  input: "SELECT COVAR_SAMP(^ , EMP.ENAME) FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: "SELECT"
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "VALUES"
     -
      kind: "Keyword"
      label: "*"
     -
      kind: "Keyword"
      label: "CASE"
    functionContext:
      function:
        description: "Returns the sample covariance for non-NULL pairs across all input values."
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "COVAR_SAMP"
        signatures:
         -
          parameters:
           -
            description: "An expression that evaluates to a numeric type. This parameter is the dependent value."
            kind: "REGULAR"
            name: "expression1"
            type: "NUMERIC"
           -
            description: "An expression that evaluates to a numeric type. This parameter is the independent value."
            kind: "REGULAR"
            name: "expression2"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "SELECT COVAR_POP(trip_distance_mi, fare_amount)\nFROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\"\n"
            result: "31.70536780565699"
           -
            call: "SELECT COVAR_POP(DISTINCT trip_distance_mi, fare_amount)\nFROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\"\n"
            result: "31.7053678056971"
           -
            call: "SELECT COVAR_POP(trip_distance_mi, fare_amount)\n  OVER (PARTITION BY trip_distance_mi)\nFROM Samples.\"samples.dremio.com\".\"NYC-taxi-trips\"\n"
            result: "2.442515362986122e-15"
      missingTypes: []
      signaturesMatched: []
      suppliedParameterTypes:
        afterCursor:
         - "CHARACTERS"
        beforeCursor: []
    hasMoreResults: true
 -
  description: "COMMA SEPARATED PARTIAL NAME"
  input: "SELECT REGR_SX^"
  output:
    completions:
     -
      insertText: "REGR_SXX(${1:NUMERIC}, ${2:NUMERIC})"
      kind: "Function"
      label: "REGR_SXX(???, ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "COMMA SEPARATED NAME WITH ONE PARAMETER"
  input: "SELECT REGR_SXX(EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "COMMA SEPARATED NAME WITH ONE PARAMETER COMMA"
  input: "SELECT REGR_SXX(EMP.ENAME, ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: "("
     -
      kind: "Keyword"
      label: "MULTISET"
     -
      kind: "Keyword"
      label: "+"
     -
      kind: "Keyword"
      label: "-"
     -
      kind: "Keyword"
      label: "?"
    functionContext:
      function:
        description: "<DESCRIPTION GOES HERE>"
        functionCategories: []
        name: "REGR_SXX"
        signatures:
         -
          description: "<DESCRIPTION GOES HERE>"
          parameters:
           -
            description: "<PARAMETER DESCRIPTION GOES HERE>"
            format: "<PARAMETER FORMAT GOES HERE>"
            kind: "REGULAR"
            name: "<PARAMETER NAME GOES HERE>"
            type: "NUMERIC"
           -
            description: "<PARAMETER DESCRIPTION GOES HERE>"
            format: "<PARAMETER FORMAT GOES HERE>"
            kind: "REGULAR"
            name: "<PARAMETER NAME GOES HERE>"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "<SAMPLE CALL GOES HERE>"
            result: "<SAMPLE RETURN GOES HERE>"
      missingTypes: []
      signaturesMatched: []
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor:
         - "CHARACTERS"
    hasMoreResults: true
 -
  description: "COMMA SEPARATED WITH SECOND PARAMETER"
  input: "SELECT REGR_SXX(^ , EMP.ENAME) FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: "SELECT"
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "VALUES"
     -
      kind: "Keyword"
      label: "*"
     -
      kind: "Keyword"
      label: "CASE"
    functionContext:
      function:
        description: "<DESCRIPTION GOES HERE>"
        functionCategories: []
        name: "REGR_SXX"
        signatures:
         -
          description: "<DESCRIPTION GOES HERE>"
          parameters:
           -
            description: "<PARAMETER DESCRIPTION GOES HERE>"
            format: "<PARAMETER FORMAT GOES HERE>"
            kind: "REGULAR"
            name: "<PARAMETER NAME GOES HERE>"
            type: "NUMERIC"
           -
            description: "<PARAMETER DESCRIPTION GOES HERE>"
            format: "<PARAMETER FORMAT GOES HERE>"
            kind: "REGULAR"
            name: "<PARAMETER NAME GOES HERE>"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "<SAMPLE CALL GOES HERE>"
            result: "<SAMPLE RETURN GOES HERE>"
      missingTypes: []
      signaturesMatched: []
      suppliedParameterTypes:
        afterCursor:
         - "CHARACTERS"
        beforeCursor: []
    hasMoreResults: true
 -
  description: "COMMA SEPARATED PARTIAL NAME"
  input: "SELECT REGR_SY^"
  output:
    completions:
     -
      insertText: "REGR_SYY(${1:NUMERIC}, ${2:NUMERIC})"
      kind: "Function"
      label: "REGR_SYY(???, ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "COMMA SEPARATED NAME WITH ONE PARAMETER"
  input: "SELECT REGR_SYY(EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "COMMA SEPARATED NAME WITH ONE PARAMETER COMMA"
  input: "SELECT REGR_SYY(EMP.ENAME, ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: "("
     -
      kind: "Keyword"
      label: "MULTISET"
     -
      kind: "Keyword"
      label: "+"
     -
      kind: "Keyword"
      label: "-"
     -
      kind: "Keyword"
      label: "?"
    functionContext:
      function:
        description: "<DESCRIPTION GOES HERE>"
        functionCategories: []
        name: "REGR_SYY"
        signatures:
         -
          description: "<DESCRIPTION GOES HERE>"
          parameters:
           -
            description: "<PARAMETER DESCRIPTION GOES HERE>"
            format: "<PARAMETER FORMAT GOES HERE>"
            kind: "REGULAR"
            name: "<PARAMETER NAME GOES HERE>"
            type: "NUMERIC"
           -
            description: "<PARAMETER DESCRIPTION GOES HERE>"
            format: "<PARAMETER FORMAT GOES HERE>"
            kind: "REGULAR"
            name: "<PARAMETER NAME GOES HERE>"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "<SAMPLE CALL GOES HERE>"
            result: "<SAMPLE RETURN GOES HERE>"
      missingTypes: []
      signaturesMatched: []
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor:
         - "CHARACTERS"
    hasMoreResults: true
 -
  description: "COMMA SEPARATED WITH SECOND PARAMETER"
  input: "SELECT REGR_SYY(^ , EMP.ENAME) FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: "SELECT"
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "VALUES"
     -
      kind: "Keyword"
      label: "*"
     -
      kind: "Keyword"
      label: "CASE"
    functionContext:
      function:
        description: "<DESCRIPTION GOES HERE>"
        functionCategories: []
        name: "REGR_SYY"
        signatures:
         -
          description: "<DESCRIPTION GOES HERE>"
          parameters:
           -
            description: "<PARAMETER DESCRIPTION GOES HERE>"
            format: "<PARAMETER FORMAT GOES HERE>"
            kind: "REGULAR"
            name: "<PARAMETER NAME GOES HERE>"
            type: "NUMERIC"
           -
            description: "<PARAMETER DESCRIPTION GOES HERE>"
            format: "<PARAMETER FORMAT GOES HERE>"
            kind: "REGULAR"
            name: "<PARAMETER NAME GOES HERE>"
            type: "NUMERIC"
          returnType: "DOUBLE"
          sampleCodes:
           -
            call: "<SAMPLE CALL GOES HERE>"
            result: "<SAMPLE RETURN GOES HERE>"
      missingTypes: []
      signaturesMatched: []
      suppliedParameterTypes:
        afterCursor:
         - "CHARACTERS"
        beforeCursor: []
    hasMoreResults: true
 -
  description: "COMMA SEPARATED PARTIAL NAME"
  input: "SELECT APPROX_COUNT_DISTINC^"
  output:
    completions:
     -
      detail: "Returns the approximate number of rows that contain distinct values in a column. Ignores rows that contain a null value for the column."
      insertText: "APPROX_COUNT_DISTINCT(${1|ALL,DISTINCT|} ${2:value})"
      kind: "Function"
      label: "APPROX_COUNT_DISTINCT({ALL,DISTINCT} ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "COMMA SEPARATED NAME WITH ONE PARAMETER"
  input: "SELECT APPROX_COUNT_DISTINCT(EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "COMMA SEPARATED NAME WITH ONE PARAMETER COMMA"
  input: "SELECT APPROX_COUNT_DISTINCT(EMP.ENAME, ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: "("
     -
      kind: "Keyword"
      label: "MULTISET"
     -
      kind: "Keyword"
      label: "+"
     -
      kind: "Keyword"
      label: "-"
     -
      kind: "Keyword"
      label: "?"
    functionContext:
      function:
        description: "Returns the approximate number of rows that contain distinct values in a column. Ignores rows that contain a null value for the column."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
        name: "APPROX_COUNT_DISTINCT"
        signatures:
         -
          description: "Returns an NUMERIC"
          parameters:
           -
            description: "The column can contain values of any data type."
            kind: "REGULAR"
            name: "column_name"
            type: "ANY"
          returnType: "BIGINT"
          sampleCodes:
           -
            call: "SELECT APPROX_COUNT_DISTINCT(business_id) AS \"number_of_businesses\" FROM \"restaurant_reviews.parquet\";"
            result: "62"
          snippetOverride: "APPROX_COUNT_DISTINCT(${1|ALL,DISTINCT|} ${2:value})"
      missingTypes: []
      signaturesMatched: []
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor:
         - "CHARACTERS"
    hasMoreResults: true
 -
  description: "COMMA SEPARATED WITH SECOND PARAMETER"
  input: "SELECT APPROX_COUNT_DISTINCT(^ , EMP.ENAME) FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: "SELECT"
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "VALUES"
     -
      kind: "Keyword"
      label: "*"
     -
      kind: "Keyword"
      label: "CASE"
    functionContext:
      function:
        description: "Returns the approximate number of rows that contain distinct values in a column. Ignores rows that contain a null value for the column."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
        name: "APPROX_COUNT_DISTINCT"
        signatures:
         -
          description: "Returns an NUMERIC"
          parameters:
           -
            description: "The column can contain values of any data type."
            kind: "REGULAR"
            name: "column_name"
            type: "ANY"
          returnType: "BIGINT"
          sampleCodes:
           -
            call: "SELECT APPROX_COUNT_DISTINCT(business_id) AS \"number_of_businesses\" FROM \"restaurant_reviews.parquet\";"
            result: "62"
          snippetOverride: "APPROX_COUNT_DISTINCT(${1|ALL,DISTINCT|} ${2:value})"
      missingTypes: []
      signaturesMatched: []
      suppliedParameterTypes:
        afterCursor:
         - "CHARACTERS"
        beforeCursor: []
    hasMoreResults: true
 -
  description: "COUNT PARTIAL NAME"
  input: "SELECT COUN^"
  output:
    completions:
     -
      detail: "Returns the total number of records for the specified expression."
      insertText: "COUNT(*)"
      kind: "Function"
      label: "COUNT(*)"
     -
      detail: "Returns the total number of records for the specified expression."
      insertText: "COUNT(${1|ALL,DISTINCT|} ${2:value})"
      kind: "Function"
      label: "COUNT({ALL,DISTINCT} ???)"
    functionContext: null
    hasMoreResults: false
 -
  description: "COUNT NAME ONLY"
  input: "SELECT COUNT(^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext:
      function:
        description: "Returns the total number of records for the specified expression."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "COUNT"
        signatures:
         -
          description: "Returns the total number of records in the dataset."
          parameters: []
          returnType: "BIGINT"
          sampleCodes:
           -
            call: "SELECT COUNT(*) FROM EMP"
            result: "93456745"
          snippetOverride: "COUNT(*)"
         -
          description: "Returns the total number of records for the specified expression."
          parameters:
           -
            description: "Expression to evaluate number of records for."
            kind: "REGULAR"
            name: "expression"
            type: "ANY"
          returnType: "BIGINT"
          sampleCodes:
           -
            call: "SELECT COUNT(column_name) FROM my_table"
            result: "89"
          snippetOverride: "COUNT(${1|ALL,DISTINCT|} ${2:value})"
      missingTypes:
       - "ANY"
      signaturesMatched:
       -
        description: "Returns the total number of records for the specified expression."
        parameters:
         -
          description: "Expression to evaluate number of records for."
          kind: "REGULAR"
          name: "expression"
          type: "ANY"
        returnType: "BIGINT"
        sampleCodes:
         -
          call: "SELECT COUNT(column_name) FROM my_table"
          result: "89"
        snippetOverride: "COUNT(${1|ALL,DISTINCT|} ${2:value})"
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor: []
    hasMoreResults: true
 -
  description: "COMPLETE COUNT WITH STAR"
  input: "SELECT COUNT( * ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
    functionContext: null
    hasMoreResults: false
 -
  description: "COUNT WITH ALL ONE PARAMETER"
  input: "SELECT COUNT( ALL EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
 -
  description: "COUNT WITH DISTINCT ONE PARAMETER COMMA"
  input: "SELECT COUNT( DISTINCT EMP.ENAME, ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: "("
     -
      kind: "Keyword"
      label: "MULTISET"
     -
      kind: "Keyword"
      label: "+"
     -
      kind: "Keyword"
      label: "-"
     -
      kind: "Keyword"
      label: "?"
    functionContext:
      function:
        description: "Returns the total number of records for the specified expression."
        dremioVersion: "1.0+"
        functionCategories:
         - "AGGREGATE"
         - "WINDOW"
        name: "COUNT"
        signatures:
         -
          description: "Returns the total number of records in the dataset."
          parameters: []
          returnType: "BIGINT"
          sampleCodes:
           -
            call: "SELECT COUNT(*) FROM EMP"
            result: "93456745"
          snippetOverride: "COUNT(*)"
         -
          description: "Returns the total number of records for the specified expression."
          parameters:
           -
            description: "Expression to evaluate number of records for."
            kind: "REGULAR"
            name: "expression"
            type: "ANY"
          returnType: "BIGINT"
          sampleCodes:
           -
            call: "SELECT COUNT(column_name) FROM my_table"
            result: "89"
          snippetOverride: "COUNT(${1|ALL,DISTINCT|} ${2:value})"
      missingTypes: []
      signaturesMatched: []
      suppliedParameterTypes:
        afterCursor: []
        beforeCursor:
         - "CHARACTERS"
    hasMoreResults: true
 -
  description: "MODE NAME ONLY"
  input: "SELECT  MODE(^ FROM EMP"
  output:
    completions:
     -
      data:
        column:
          name: "COMM"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.COMM"
      kind: "Column"
      label: "COMM"
     -
      data:
        column:
          name: "DEPTNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.DEPTNO"
      kind: "Column"
      label: "DEPTNO"
     -
      data:
        column:
          name: "EMPNO"
          type: "INTEGER"
        tableAlias: "EMP"
      detail: "column (INTEGER) in EMP"
      insertText: "EMP.EMPNO"
      kind: "Column"
      label: "EMPNO"
     -
      data:
        column:
          name: "ENAME"
          type: "VARCHAR"
        tableAlias: "EMP"
      detail: "column (VARCHAR) in EMP"
      insertText: "EMP.ENAME"
      kind: "Column"
      label: "ENAME"
     -
      data:
        column:
          name: "HIREDATE"
          type: "TIMESTAMP"
        tableAlias: "EMP"
      detail: "column (TIMESTAMP) in EMP"
      insertText: "EMP.HIREDATE"
      kind: "Column"
      label: "HIREDATE"
    functionContext: null
    hasMoreResults: true
 -
  description: "MODE WITH ONE PARAMETER"
  input: "SELECT  MODE(EMP.ENAME ^ FROM EMP"
  output:
    completions:
     -
      kind: "Keyword"
      label: ")"
     -
      kind: "Keyword"
      label: "="
     -
      kind: "Keyword"
      label: "<"
     -
      kind: "Keyword"
      label: "AND"
     -
      kind: "Keyword"
      label: ">"
    functionContext: null
    hasMoreResults: true
